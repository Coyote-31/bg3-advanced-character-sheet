<ls:UIWidget x:Name="TargetInfo"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 mc:Ignorable="d"
             Template="{StaticResource Hud.Root}"
             d:DataContext="{d:DesignInstance {x:Type ls:Widget}, IsDesignTimeCreatable=True}"
             d:DesignWidth="3840" d:DesignHeight="2160">
    
    <ls:UIWidget.ContentTemplate>
        <DataTemplate DataType="ls:Widget">
            <DataTemplate.Resources>
                <BitmapImage x:Key="CastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast.png"/>
                <BitmapImage x:Key="EnemyCastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast_enemy.png"/>
                <BitmapImage x:Key="CoopCastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast_coop.png"/>
				<BitmapImage x:Key="DeltasPlus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_plus.png"/>
                <BitmapImage x:Key="DeltasMinus" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_minus.png"/>

                <Storyboard x:Key="CastBarAppearAnim" FillBehavior="Stop">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="CastInfoRoot">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="100"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.18" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>

                <Storyboard x:Key="CastBarDisappearAnim">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin">
                        <SplineThicknessKeyFrame KeyTime="0:0:0.3" Value="0,0,0,0" />
                        <SplineThicknessKeyFrame KeyTime="0:0:0.8" Value="0,-100,0,0" />
                    </ThicknessAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="CastInfoRoot">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="-50"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>

                <DataTemplate x:Key="DamageTypeItemTemplate" DataType="{x:Type ls:VMDamageRoll}">
                    <StackPanel x:Name="DamageTypePanel" HorizontalAlignment="Center" Orientation="Horizontal" Width="Auto">
                        <Image>
                            <Image.Style>
                                <Style TargetType="Image" BasedOn="{StaticResource DamageIconStyle}">
                                    <Setter Property="Margin" Value="0,0,0,0"/>
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Setter Property="MaxHeight" Value="48"/>
                                    <Setter Property="MaxWidth" Value="48"/>
                                </Style>
                            </Image.Style>
                        </Image>
                    </StackPanel>
                </DataTemplate>
        
		
		<Style x:Key="DetailedListValue1" TargetType="TextBlock">
			<Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
			<Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
			<Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                    <Setter Property="TextBlock.Effect">
                        <Setter.Value>
                            <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                        </Setter.Value>
                    </Setter>
		</Style>
		
		<Style x:Key="SkillTitleTextStyle1" TargetType="TextBlock" BasedOn="{StaticResource DetailedListValue1}">
			<Setter Property="ToolTipService.Placement" Value="Right"/>
			<Setter Property="HorizontalAlignment" Value="Right"/>
			<Setter Property="VerticalAlignment" Value="Center"/>
			<Setter Property="DockPanel.Dock" Value="Right"/>
			<Setter Property="Margin" Value="0,0,8,0"/>			
		</Style>

		
		
		<!-- Plus icon for containers with items-->
		<Style x:Key="ContainerCellItemStyle2" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Width="20" Height="20">
                        <Image x:Name="ContainerIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_d.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill"/>
                        <Image x:Name="NewItemInsideIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_new1.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill" Visibility="Collapsed"/>
                        <Image x:Name="AnimatedImage" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_container_more_new2.png" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill" Visibility="Collapsed" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding NewItemsInside, FallbackValue=False}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="AnimatedImage" RepeatBehavior="3x">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <Setter TargetName="NewItemInsideIcon" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="AnimatedImage" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContainerIcon" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsContainer, FallbackValue=False}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
		</Style>
		
		<!-- Control for GoldAndWeight-->
		<!--<Style x:Key="GoldandWeight" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
										<Grid x:Name="ForItems" Grid.Column="1" Grid.Row="2">
										
										
											<Stackpanel Orientation="Horizontal" Background="Transparent" HorizontalAlignment="Center">
												<TextBlock Text="{Binding Gold, StringFormat={}{0:N0}}" Style="{StaticResource SkillTitleTextStyle1}"/>
											
												<Image Source="{StaticResource GoldIconImg}" Stretch="Uniform" Width="40" VerticalAlignment="Center" Margin="-10,-6" />
											
												<Button Content="h" Visibility="Hidden"/>
											
												<TextBlock Text="{Binding Inventory.Weight, Converter={StaticResource UnitConverter}, ConverterParameter='Weight N1'}" Style="{StaticResource SkillTitleTextStyle1}"/>
											
												<Image Source="{StaticResource IconWeight}" Stretch="Uniform" Width="55" VerticalAlignment="Center" Margin="-15, 0" />
											</Stackpanel>
										</Grid>							
                   
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
			<DataTrigger Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Type}" Value="Character">
				 <Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
        </Style.Triggers>
		</Style>-->
		
		
		<!-- Number of items in containers-->        
		<Style x:Key="ContainerItemCountItemStyle2" TargetType="Control">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <b:Interaction.Behaviors>
                            <ls:InventoriesMergerBehavior x:Name="InventoriesMerger" Inventories="{Binding Inventories}"/>
                        </b:Interaction.Behaviors>
                        <TextBlock Style="{StaticResource ItemAmountTextStyle}" Text="{Binding InventoriesSlots.Count, ElementName=InventoriesMerger}" Visibility="{Binding InventoriesSlots.Count, ElementName=InventoriesMerger, Converter={StaticResource CountToVisibilityConverter}}" FontSize="16"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="0,-16,0,0" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsContainer}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
		</Style>
				
                <Style x:Key="HitTextBlock" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
                    <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                    <Setter Property="TextBlock.Effect">
                        <Setter.Value>
                            <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                        </Setter.Value>
                    </Setter>
                </Style>				

                <Style x:Key="ModifierTextBlock" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
                    <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                    <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="MaxWidth" Value="600"/>
                </Style>

                <Style x:Key="ModifierBorder" TargetType="Border">
                    <Setter Property="CornerRadius" Value="8"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Margin" Value="4,0"/>
                    <Setter Property="Border.Effect">
                        <Setter.Value>
                            <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Border.BorderBrush">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource tint100}" Opacity="0.7"/>
                        </Setter.Value>
                    </Setter>
                </Style>
				
				<Style x:Key="TargetInfoTextStyleCustom" TargetType="TextBlock">
					<Setter Property="TextAlignment" Value="Center"/>
					<Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
					<Setter Property="noesis:Text.StrokeThickness" Value="4"/>
					<Setter Property="FontSize" Value="{DynamicResource ScaledMediumFontSize}"/>
					<Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
				</Style>


	

		<!-- HP BAR TEMPLATE-->
		<ControlTemplate x:Key="TargetHealthBarTemplateCustom" TargetType="Control" >
        <Grid x:Name="HPBarContainer" HorizontalAlignment="Center" d:DataContext="{d:DesignInstance {x:Type ls:VMGameObject}, IsDesignTimeCreatable=True}">
            <ls:LSProgressBar x:Name="HealthBar" Margin="0,30,0,0" Width="674" Height="28" Clip="M 12 0 L 660 0 L 672 14 L 660 28 L 12 28 L 0 14 Z" Minimum="0" SubValue="{Binding Stats.TemporaryHealth.Value, Mode=OneWay}" Background="{StaticResource LS_HealthBarBackgound}" BorderBrush="Transparent" VerticalAlignment="Top" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}}">
                <ls:LSProgressBar.Maximum>
                    <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                        <Binding Path="Stats.Health.Max" Mode="OneWay"/>
                        <Binding Path="Stats.TemporaryHealth.Max" Mode="OneWay"/>
                    </MultiBinding>
                </ls:LSProgressBar.Maximum>
                <ls:LSProgressBar.Value>
                    <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                        <Binding Path="Stats.Health.Value" Mode="OneWay"/>
                        <Binding Path="Stats.TemporaryHealth.Value" Mode="OneWay"/>
                    </MultiBinding>
                </ls:LSProgressBar.Value>

                <b:Interaction.Triggers>
                    <b:PropertyChangedTrigger Binding="{Binding .}">
                        <ls:LSControlStoryboard ControlStoryboardOption="Play">
                            <ls:LSControlStoryboard.Storyboard>
                                <Storyboard FillBehavior="Stop">
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ls:LSProgressBar.AllowValueChangedEvents)">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False" />
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0.4" Value="True" />
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </ls:LSControlStoryboard.Storyboard>
                        </ls:LSControlStoryboard>
                    </b:PropertyChangedTrigger>
                </b:Interaction.Triggers>

                <ls:LSProgressBar.Template>
                    <ControlTemplate TargetType="ls:LSProgressBar" >
                        <Grid Name="PART_Track" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <!-- This is only here to use as a 'from' size for the animated part -->
                            <Rectangle Name="PART_OldIndicator" Fill="Transparent" ClipToBounds="True" HorizontalAlignment="Left" Visibility="Hidden"/>
                            <!-- Tag value is changed through the HealthAnimation storyboard -->
                            <Rectangle Name="AnimatedPart" Fill="{StaticResource LS_tint100}" HorizontalAlignment="Left" Tag="1">
                                <Rectangle.Width>
                                    <MultiBinding Converter="{StaticResource LinearInterpolationConverter}">
                                        <Binding Path="Width" ElementName="PART_OldIndicator"/>
                                        <Binding Path="Width" ElementName="PART_AvailableIndicator"/>
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </Rectangle.Width>
                            </Rectangle>
                            <Grid ClipToBounds="True" HorizontalAlignment="Left">
                                <Rectangle Name="PART_AvailableIndicator" Fill="{StaticResource LS_HealthBarForegound}"/>
                                <Rectangle Name="PART_SubIndicator" Fill="{StaticResource LS_TemporaryHBForeground}" HorizontalAlignment="Right"/>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="ls:LSProgressBar.ValueDecreased">
                                <BeginStoryboard x:Name="HealthAnimation">
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard FillBehavior="Stop">
                                            <!-- Bindings as values refuse to work here. Using Tag as a % value for a lerp converter on the target element, which will lerp to correct values -->
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Tag" Storyboard.TargetName="AnimatedPart">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="FrameworkElement.Unloaded" >
                                <StopStoryboard BeginStoryboardName="HealthAnimation"/>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </ls:LSProgressBar.Template>
            </ls:LSProgressBar>
			
            <Image x:Name="BGImage" HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="None" Width="900" Margin="0,0,0,-44" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_hp.png"/>
            
			<StackPanel x:Name="HealthTextStack" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,24,0,0" Visibility="{Binding Stats.Health.IsValid, Converter={StaticResource BoolToVisibleConverter}}">
                <StackPanel.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource TargetInfoTextStyle}"/>
                </StackPanel.Resources>
	            <TextBlock x:Name="HealthText" Text="{Binding Stats.Health.Value}" FontWeight="Bold"/>
                <TextBlock x:Name="HealthMaxText" Text="{Binding Stats.Health.Max, StringFormat='/{0}'}" FontWeight="Bold"/>

                <TextBlock x:Name="TempHealthText" Text="{Binding Stats.TemporaryHealth.Value, StringFormat=' + {0}'}" Visibility="{Binding Stats.TemporaryHealth.Value, Converter={StaticResource CountToVisibilityConverter}}" FontWeight="Bold"/>
                <TextBlock x:Name="TempHealthMaxText" Text="{Binding Stats.TemporaryHealth.Max, StringFormat='/{0}'}" Visibility="{Binding Stats.TemporaryHealth.Value, Converter={StaticResource CountToVisibilityConverter}}" FontWeight="Bold"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding CharacterType}" Value="Boss">
                <Setter TargetName="BGImage" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_hp_boss.png"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Stats.Health.IsValid}" Value="False">
                <Setter TargetName="BGImage" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_no_hp.png"/>
                <Setter TargetName="BGImage" Property="Margin" Value="0"/>
            </DataTrigger>

            <!-- Hide NPC HP -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPlayableCharacter}" Value="False"/>
                    <Condition Binding="{Binding DataContext.Data.CurrentRuleSetModifiers, Converter={StaticResource RuleSetModifierValueConverter}, ConverterParameter='HIDE_NPC_HP', RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="HealthTextStack" Property="Visibility" Value="Hidden"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!-- Hide Item HP -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="Item"/>
                    <Condition Binding="{Binding DataContext.Data.CurrentRuleSetModifiers, Converter={StaticResource RuleSetModifierValueConverter}, ConverterParameter='HIDE_NPC_HP', RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="HealthTextStack" Property="Visibility" Value="Hidden"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
		</ControlTemplate>
		<!-- HP BAR TEMPLATE END-->
	
                <ControlTemplate x:Key="ConcentrationTemplate">
                    <StackPanel x:Name="ConcentrationPanel" Orientation="Horizontal" >
                        <Grid x:Name="IconHolder" HorizontalAlignment="Left" VerticalAlignment="Top">
                            <Ellipse Fill="{Binding ConcentrationSpell.Icon}" Width="42" Height="42"/>
                            <Image x:Name="BackgroundConcentrationImage" Source="{StaticResource ConcentrationBackground}" Stretch="Uniform" Width="82"/>
                        </Grid>
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,0,0" FontWeight="Medium" FontSize="{StaticResource ScaledSmallFontSize}"
                                   Style="{StaticResource HitTextBlock}">
                            <TextBlock.Text>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="hf5795482g056ag446fgb664gfe2b0007058e"/>
                                    <Binding Source="hccfa6976gd950g49e0g88a3gbb0e8380175f" Converter="{StaticResource TranslatedStringConverter}"/>
                                    <Binding Path="ConcentrationSpell.Name"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding CharacterType}" Value="Avatar">
                            <Setter TargetName="BackgroundConcentrationImage" Property="Source" Value="{StaticResource AvatarConcentrationBackground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding PlayerRelation}" Value="Enemy">
                            <Setter TargetName="BackgroundConcentrationImage" Property="Source" Value="{StaticResource EnemyConcentrationBackground}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <DataTemplate x:Key="AdvantageItemTemplate" DataType="ls:VMAdvantage">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Path='(ItemsControl.AlternationIndex)', RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CountToVisibilityConverter}}" VerticalAlignment="Center" Margin="-4,0,4,0"/>
                        <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Description}"/>
                    </StackPanel>
                </DataTemplate>

                <Style x:Key="AdvantageItemStyle" TargetType="ContentPresenter">
                    <Setter Property="Margin" Value="4,0"/>
                </Style>
                
                <Style x:Key="CollapsableTextBlock" TargetType="TextBlock">
                    <Style.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
                
                <Style x:Key="TargetTitleTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource CollapsableTextBlock}">
                    <Setter Property="TextAlignment" Value="Center"/>
                    <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                    <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
                    <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="MaxWidth" Value="1400"/>
                    <Setter Property="TextBlock.Effect">
                        <Setter.Value>
                            <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                        </Setter.Value>
                    </Setter>
                </Style>

                <DataTemplate x:Key="StatusListItemTemplate" DataType="{x:Type ls:VMStatus}">
                    <DataTemplate.Resources>
                        <BitmapImage x:Key="statusBG" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG.png"/>
                        <BitmapImage x:Key="statusBG_fill" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG_fill.png"/>
						<System:Double x:Key="Minus1260">-1260</System:Double>
                    </DataTemplate.Resources>
					<!-- Statuses-->
					
					
					
                    <StackPanel Orientation="Horizontal" Margin="8,0,8,0">
                        <Grid Width="72" Height="72">
                            <Image Source="{StaticResource statusBG}" Stretch="Uniform" Width="54" VerticalAlignment="Center" Margin="-8,0"/>
                            <ls:LSPie Value="{Binding RemainingPercentage}" SweepDirection="Clockwise">
                                <Image Source="{StaticResource statusBG_fill}" Stretch="Uniform" Width="48"/>
                            </ls:LSPie>
							<!-- status icons size Width="48" Height="48" RadiusX="24" RadiusY="24" -->
                            <Rectangle Width="38" Height="38" RadiusX="19" RadiusY="19" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{Binding Icon}"/>
                            <TextBlock Text="{Binding Duration}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,-12" Foreground="{StaticResource LS_PrimaryColor}"
                               noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="6" Style="{StaticResource NarrowTooltipModifierText}"
                               Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource DoubleZeroValue}}" FontSize="{StaticResource ScaledSmallFontSize}"/>
                        </Grid>
						<!-- FontSize="{StaticResource ScaledSmallishFontSize}" Margin="8,0"-->
                        <TextBlock x:Name="statusLabel" Style="{StaticResource HitTextBlock}" FontSize="{StaticResource ScaledMediumFontSize}" Text="{Binding Name}" VerticalAlignment="Center" Margin="-4,0"/>
                    </StackPanel>

                    <DataTemplate.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                    <Binding Path="ActualWidth" ElementName="StatusHolderHidden"/>
                                    <Binding Path="ActualWidth" ElementName="Root" Converter="{StaticResource AddConverter}" ConverterParameter="{StaticResource Minus1260}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="statusLabel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>

                <DataTemplate x:Key="HiddenStatusListItemTemplate" DataType="{x:Type ls:VMStatus}">
                    <TextBlock x:Name="statusLabel" Style="{StaticResource HitTextBlock}" FontSize="{StaticResource ScaledSmallishFontSize}" Text="{Binding Name}" VerticalAlignment="Center" Margin="88,0,16,0"/>
                </DataTemplate>
				<System:Double x:Key="Minus1200">-1200</System:Double>
                <System:Double x:Key="Minus1300">-1300</System:Double>
            </DataTemplate.Resources>
            
            <!-- Target Info Contents -->
            <Grid x:Name="Root">
				<!-- Margin="0,80,0,0" -->
                <Border x:Name="TargetInfoRoot" Margin="0,80,0,0" Visibility="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget, Converter={StaticResource NullToHiddenConverter}}">
				
                        <b:Interaction.Behaviors>
                        <ls:CollectionFilterBehavior x:Name="PositiveModifierBehavior" ItemsSource="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers}" Predicate="{Binding Data.PositiveModifierPredicate}"/>
                        <ls:CollectionFilterBehavior x:Name="NegativeModifierBehavior" ItemsSource="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers}" Predicate="{Binding Data.NegativeModifierPredicate}"/>
                    </b:Interaction.Behaviors>
						
						<!-- Margin 0 -25 0 0 from combatant panel -->
                        <StackPanel x:Name="MainContainer" VerticalAlignment="Top" Visibility="{Binding CurrentPlayer.UIData.CanShowTargetInfo, Converter={StaticResource BoolToVisibleConverter}}" Margin="0,-5,0,0" >
						
							<!-- NAME PANEL -->
                            <StackPanel x:Name="TargetName" Panel.ZIndex="1" DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Width="1400">

                                <!-- Target Name and Level-->
                                <Grid x:Name ="TargetStats" HorizontalAlignment="Center">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
									
									<Grid.RowDefinitions>
                                        <RowDefinition Width="Auto"/>
                                        <RowDefinition Width="Auto"/>
                                        <RowDefinition Width="Auto"/>
                                    </Grid.RowDefinitions>
									
									
										<!-- Round Portrait-->
										<Grid Grid.Column="0" Grid.RowSpan="3" Margin="-60,0,0,0" VerticalAlignment="Center">	
										
											

											<!-- SCALER START -->
											<Grid.Style>			
												<Style TargetType="Grid">															
													<Setter Property="RenderTransformOrigin" Value="0.0,0.0"/>
													<Setter Property="RenderTransform">
														<Setter.Value>
															<TransformGroup>
																<ScaleTransform ScaleX="2.0" ScaleY="2.0"/>
																<SkewTransform/>
																<RotateTransform/>													
																<TranslateTransform X="-60" Y="-40"/>
															</TransformGroup>
														</Setter.Value>
													</Setter>											
											</Style>
											</Grid.Style>
											<!-- SCALER END -->
											
												<Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG.png" Stretch="Uniform" VerticalAlignment="Center" Width="56"/>

												<ls:LSPie Value="{Binding RemainingPercentage}" SweepDirection="Clockwise">
													<Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/statusBG_fill.png" Stretch="Uniform" Width="52"/>
												</ls:LSPie>

												<Rectangle Style="{StaticResource SummaryRoundIcons}" Fill="{Binding Icon}"/>	

												<!-- Plus icon for containers and number of items inside container in a preview-->
												<Control Style="{StaticResource ContainerCellItemStyle2}" HorizontalAlignment="Right" VerticalAlignment="Top"  Margin="0,12,14,0" />
												<Control Style="{StaticResource ContainerItemCountItemStyle2}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,3,20,0" />
																						
										</Grid>
									
                                    <!-- TARGET NAME increase font-->
									<!-- FontSize="{StaticResource ScaledBigFontSize}" -->
									<TextBlock Grid.Column="1" Grid.Row="0" x:Name="CharacterName" Text="{Binding Name}" Style="{StaticResource TargetTitleTextBlockStyle}" FontSize="{StaticResource ScaledBigFontSize}" FontWeight="Bold" HorizontalAlignment="Center"/>
									
									
									 
									<!-- <StackPanel>
										<ContentControl Content="{Binding .}" ContentTemplate="{StaticResource CharacterSheetDetailedTemplate}"/>
									 </StackPanel>-->
									 
									<!-- Target Title -->
									<TextBlock Grid.Column="1" Grid.Row="1" Text="{Binding Title}" Style="{StaticResource TargetTitleTextBlockStyle}" HorizontalAlignment="Center" Margin="0,0,0,0"/>
									
									
									
									<!-- TARGET LEVEL add round icon, level number is inside -->
									<!-- FontSize="{StaticResource ScaledSmallFontSize}" -->
											<TextBlock Grid.Column="1" Grid.Row="2" x:Name="NPCRace" HorizontalAlignment="Center" Style="{StaticResource TargetTitleTextBlockStyle}" FontSize="{DynamicResource ScaledSmallishFontSize}" TextAlignment="Center" Margin="0,0">
                                                <TextBlock.Text>
                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                        <Binding Source="hd678d4eeg181fg499dg9e81g2146ab24e03a"/>
                                                        <Binding Path="Stats.Level.Value"/>
                                                        <Binding Path="Stats.Race.DisplayName"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>                                                
                                            </TextBlock>									
									
								
									
										<Grid x:Name="ForItems" Grid.Column="1" Grid.Row="2" >
										
										
										<!--Visibility="{Binding Stats.Level.Value, Converter={StaticResource CountToVisibilityConverter}}"-->
										
										<!--<Grid.Style>
											<Style TargetType="Grid">
                
												<Style.Triggers>
													<DataTrigger Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Type}" Value="Character">
														<Setter TargetName="ForItems" Property="Visibility" Value="Collapsed"/>
													</DataTrigger>
																									
												</Style.Triggers>
											</Style>
										</Grid.Style>-->
										
										<!--<ItemsControl x:Name="GNW" HorizontalAlignment="Center" ItemsSource="{Binding Gold}" >
											<ItemsControl.ItemTemplate>
												<DataTemplate>-->
												
											<Stackpanel Orientation="Horizontal" Background="Transparent" HorizontalAlignment="Center" >
												<TextBlock Text="{Binding Gold, StringFormat={}{0:N0} gold}" Style="{StaticResource SkillTitleTextStyle1}"/>
												<TextBlock.Style>
													<Style TargetType="TextBlock">
														<Style.Triggers>
															<DataTrigger Binding="{Binding Gold, Converter={StaticResource LessThanConverter}, ConverterParameter=2}" Value="True">
																<Setter Property="Visibility" Value="Collapsed"/>																
															</DataTrigger>
														
														</Style.Triggers>
													</Style>
												</TextBlock.Style>
											
												<!--<Image Source="{StaticResource GoldIconImg}" Stretch="Uniform" Width="40" VerticalAlignment="Center" Margin="-10,-6"/>-->
											
												<!--<Button Content="h" Visibility="Hidden"/>-->

											
												<!--<Image Source="{StaticResource IconWeight}" Stretch="Uniform" Width="55" VerticalAlignment="Center" Margin="-15, 0" />-->
													<!-- Inventory.Weight Stats.Weight.Value-->
											</Stackpanel>
											
											
											
											<!--</DataTemplate>
											</ItemsControl.ItemTemplate>

											
											<ItemsControl.ItemsPanel>
												<ItemsPanelTemplate>
													<Stackpanel Orientation="Horizontal" />
													
												</ItemsPanelTemplate>
											</ItemsControl.ItemsPanel>
										</ItemsControl>-->
											
											
											
											
										</Grid>		
										
									<!--<Grid Grid.Column="2" Grid.Row="2">
										<TextBlock Text="{Binding Stats.Weight.Value, Converter={StaticResource UnitConverter}, ConverterParameter='Weight Short'}" Style="{StaticResource SkillTitleTextStyle1}" Margin="50,0,0,0" HorizontalAlignment="Center"/>
									</Grid>	-->
							
                            </Grid>

                                
								
								

                            </StackPanel>
							<!-- NAME PANEL END-->
								
								
								
                                <StackPanel x:Name="BodyShort" HorizontalAlignment="Center">
                                    <StackPanel.RenderTransform>
                                        <ScaleTransform/>
                                    </StackPanel.RenderTransform>

                                    <!-- Health bar -->
                                    <Control x:Name="HPBarContainer" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Template="{StaticResource TargetHealthBarTemplateCustom}"/>

									<!-- Resitances START-->
									<StackPanel x:Name="ResistancesCustom" Orientation="Vertical" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Margin="0,-12,0,0">
									
									<!-- SCALER START -->
									<StackPanel.Style>			
										<Style TargetType="StackPanel">															
											<Setter Property="RenderTransformOrigin" Value="0.5,0.0"/>
											<Setter Property="RenderTransform">
												<Setter.Value>
													<TransformGroup>
														<ScaleTransform ScaleX="0.90" ScaleY="0.90"/>
														<SkewTransform/>
														<RotateTransform/>													
														<TranslateTransform X="0" Y="0"/>
													</TransformGroup>
												</Setter.Value>
											</Setter>											
									 </Style>
									</StackPanel.Style>
									<!-- SCALER END -->
									 
										<ItemsControl x:Name="Resistances" HorizontalAlignment="Center" ItemsSource="{Binding Stats.Resistances}" Visibility="{Binding Stats.NumActiveResistances, Converter={StaticResource CountToVisibilityConverter}}">
											<ItemsControl.ItemTemplate>
												<DataTemplate>
													<DataTemplate.Resources>
														<BitmapImage x:Key="hourglass" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/ico_resistance_hourglass.png"/>														
													</DataTemplate.Resources>

													
													<Grid x:Name="Object" Tag="Immune" ToolTip="{StaticResource ManagedTooltip}"  Background="Transparent">
														
													
														<!-- Immunities-->
														<Grid HorizontalAlignment="Center" Margin="0,9,0,0">
															<Image x:Name="ImmuneShield" Source="{StaticResource ImmuneShield1}" Stretch="None" Visibility="Hidden"/>
															<Control x:Name="TypIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource ResistanceIcon}" />
														</Grid>

														<!-- Non-Magical Res 68 80-->
														<Image x:Name="NonMagicalArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource ResistantNonMagical1}" Stretch="Fill" Margin="0,9,0,0" Width="70" Height="78" Visibility="Collapsed"/>
														
														<!-- Magical Res-->
														<Image x:Name="MagicalArrow" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource ResistantMagical1}" Stretch="Fill" Margin="0,9,0,0" Width="70" Height="78" Visibility="Collapsed"/>

														<!-- Temporary Reses-->
														<StackPanel HorizontalAlignment="Center" VerticalAlignment="Bottom" Orientation="Horizontal" Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}}" Margin="0,0,0,-10" IsHitTestVisible="False">
															<Image Stretch="None" Source="{StaticResource hourglass}" VerticalAlignment="Center" Margin="0,0,-4,0"/>
															<TextBlock Text="{Binding Duration}" Foreground="{StaticResource LS_tint100}" FontFamily="{StaticResource DefaultFont}" FontSize="{StaticResource SmallishFontSize}" VerticalAlignment="Center"/>
														</StackPanel>
													
	
													</Grid>

													<DataTemplate.Triggers>
														<DataTrigger Binding="{Binding Full}" Value="Immune">
															<Setter TargetName="ImmuneShield" Property="Visibility" Value="Visible"/>
														</DataTrigger>

														<DataTrigger Binding="{Binding NonMagical}" Value="Resistant">
															<Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
														</DataTrigger>

														<DataTrigger Binding="{Binding Magical}" Value="Resistant">
															<Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>							
														</DataTrigger>

														<DataTrigger Binding="{Binding Full}" Value="Resistant">
															<Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>	
															<Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
														</DataTrigger>

														<DataTrigger Binding="{Binding Full}" Value="Vulnerable">
															<Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="NonMagicalArrow" Property="Source" Value="{StaticResource Vulnerable_phys}"/>
															<Setter TargetName="MagicalArrow" Property="Source" Value="{StaticResource Vulnerable_magic}"/>
														</DataTrigger>
														
														<DataTrigger Binding="{Binding Magical}" Value="Vulnerable">
															<Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="NonMagicalArrow" Property="Source" Value="{StaticResource Vulnerable_phys}"/>
															<Setter TargetName="MagicalArrow" Property="Source" Value="{StaticResource Vulnerable_magic}"/>
														</DataTrigger>
														
														<DataTrigger Binding="{Binding NonMagical}" Value="Vulnerable">
															<Setter TargetName="NonMagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="MagicalArrow" Property="Visibility" Value="Visible"/>
															<Setter TargetName="NonMagicalArrow" Property="Source" Value="{StaticResource Vulnerable_phys}"/>
															<Setter TargetName="MagicalArrow" Property="Source" Value="{StaticResource Vulnerable_magic}"/>
														</DataTrigger>
														
														<!-- Hiding normal reses-->
														<MultiDataTrigger>
															<MultiDataTrigger.Conditions>
																<Condition Binding="{Binding Full}" Value="None"/>
																<Condition Binding="{Binding NonMagical}" Value="None"/>
																<Condition Binding="{Binding Magical}" Value="None"/>
															</MultiDataTrigger.Conditions>
															
															<Setter TargetName="Object" Property="Visibility" Value="Collapsed"/>
															
														</MultiDataTrigger>

															<!-- Animation for temporary reses-->
															<DataTrigger Binding="{Binding Duration}" Value="1">
															<DataTrigger.EnterActions>
															<BeginStoryboard x:Name="StatusEndingStoryboard">
																<Storyboard>
																	<DoubleAnimationUsingKeyFrames Storyboard.TargetName="Object" Storyboard.TargetProperty="Opacity" AutoReverse="True" RepeatBehavior="Forever">
																		<EasingDoubleKeyFrame KeyTime="0" Value="1"/>

																		<EasingDoubleKeyFrame KeyTime="0:0:.5" Value="1"/>

																		<EasingDoubleKeyFrame KeyTime="0:0:1.25" Value="0.6">
																			<EasingDoubleKeyFrame.EasingFunction>
																				<CubicEase EasingMode="EaseOut"/>
																			</EasingDoubleKeyFrame.EasingFunction>
																		</EasingDoubleKeyFrame>

																		<EasingDoubleKeyFrame KeyTime="0:0:1.75" Value="0.6"/>

																		<EasingDoubleKeyFrame KeyTime="0:0:2.25" Value="1">
																			<EasingDoubleKeyFrame.EasingFunction>
																				<CubicEase EasingMode="EaseOut"/>
																			</EasingDoubleKeyFrame.EasingFunction>
																		</EasingDoubleKeyFrame>

																		<EasingDoubleKeyFrame KeyTime="0:0:2.75" Value="1"/>
																	</DoubleAnimationUsingKeyFrames>
																</Storyboard>
															</BeginStoryboard>
															</DataTrigger.EnterActions>
														
															<DataTrigger.ExitActions>
																<StopStoryboard BeginStoryboardName="StatusEndingStoryboard"/>
															</DataTrigger.ExitActions>
														
														</DataTrigger>
													</DataTemplate.Triggers>
												</DataTemplate>
											</ItemsControl.ItemTemplate>

											<!-- Reses are horizontal-->
											<ItemsControl.ItemsPanel>
												<ItemsPanelTemplate>
													<WrapPanel Orientation="Horizontal" />
													
												</ItemsPanelTemplate>
											</ItemsControl.ItemsPanel>
										</ItemsControl>

											<!-- No resitances Icon and Text-->
											
											<!--<Grid Name="ResistanceEmpty" Visibility="{Binding Visibility, ElementName=Resistances, Converter={StaticResource InvertVisibilityConverter}}">
												<Image HorizontalAlignment="Center" Stretch="None" Source="{StaticResource NoResistanceIcon}"/>
												<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_accent100TxtColor}" Text="{Binding Source='h529efdfdgda98g4ed3g8d1eg46cbf1d0a5e3', Converter={StaticResource TranslatedStringConverter}}"/>
											</Grid>-->
											
												
										
									</StackPanel>
									<!-- Resitances END-->
																
                                    <!-- Info Stack -->
                                <StackPanel x:Name="DescriptionPanel" HorizontalAlignment="Center" Width="Auto" Margin="0,-10">
								
								

                                <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" MaxWidth="{Binding ActualWidth, ElementName=Root, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Minus1200}}">
                                    <Control x:Name="ConcentrationHolder" Template="{StaticResource ConcentrationTemplate}" Visibility="{Binding ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed}" HorizontalAlignment="Center"/>

                                    <!-- Status Effects -->
                                    <ItemsControl x:Name="StatusHolder" ItemsSource="{Binding StatusEffects}" ItemTemplate="{StaticResource StatusListItemTemplate}" Background="Transparent" Template="{StaticResource MinimalItemsControlTemplate}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Center" MaxWidth="{Binding ActualWidth, ElementName=Root, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource Minus1300}}" Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </WrapPanel>

                                        <!-- IF: Hit Chance and damage range preview, keeping it here as it's hidden as a test
                                
                                <StackPanel x:Name="HitChancePanel" HorizontalAlignment="Center" Orientation="Horizontal" Width="Auto" Height="52" Visibility="Collapsed" Background="Transparent" Margin="0,12,0,0">
                                     Needs merging to a single icon with a source selection?
                                    <Image x:Name="MeleeHitChanceIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/ico_target.png" Stretch="None" Margin="-8,-2,0,0" VerticalAlignment="Center" Visibility="{Binding IsMelee , Converter={StaticResource BoolToVisibleConverter}}"/>

                                    <Image x:Name="RangeHitChanceIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/ico_target.png" Stretch="None" Margin="-8,-2,0,0" VerticalAlignment="Center" Visibility="{Binding IsMelee , Converter={StaticResource BoolToCollapsedConverter}}">
                                        <Image.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            </TransformGroup>
                                        </Image.RenderTransform>
                                    </Image>

                                    <TextBlock VerticalAlignment="Center" Margin="4,0,0,0"  Text="{Binding TotalHitChance, StringFormat={}{0}%}" Width="Auto" Style="{StaticResource HitTextBlock}"/>

                                    <StackPanel Orientation="Horizontal" Margin="0,0,0,0"  HorizontalAlignment="Left">

                                        <ItemsControl x:Name="DamageIcons" 
                                                      DataContext="{Binding DataContext.CurrentPlayer.UIData, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                      ItemsSource="{Binding ObservableDamagesPreview}" 
                                                      Margin="-12,-2,0,0"
                                                      BorderBrush="Blue"
                                                      ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                                                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                                      Background="Transparent"
                                                      ItemTemplate="{StaticResource DamageTypeItemTemplate}" 
                                                      FlowDirection="RightToLeft"
                                                      VerticalAlignment="Center"
                                                      AlternationCount="{Binding ObservableDamagesPreview.Count}" 
                                                      Visibility="Collapsed">
                                            <ItemsControl.Effect>
                                                <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                                            </ItemsControl.Effect>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>

                                        <TextBlock x:Name="DamagePreview" VerticalAlignment="Center" Width="Auto" Background="Transparent" Margin="4,0,0,0" FontSize="{StaticResource ScaledBigFontSize}"  Visibility="{Binding ShowDescription,Converter={StaticResource BoolToVisibleConverter}}" Style="{StaticResource HitTextBlock}">
                                        <ls:TextBlockFormatter.SourceText>
	                                        <MultiBinding StringFormat="{}{0}~{1}">
		                                        <Binding Path="DataContext.CurrentPlayer.UIData.DamagePreviewWithResistances.Min" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
		                                        <Binding Path="DataContext.CurrentPlayer.UIData.DamagePreviewWithResistances.Max" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
	                                        </MultiBinding>
                                        </ls:TextBlockFormatter.SourceText>
                                        </TextBlock>
                                    </StackPanel>
                                </StackPanel> -->

                                      <!-- Modifiers -->
                                <Border x:Name="ModifiersPresenter" Visibility="Collapsed" >
                                    <Border.Resources>
                                        <SolidColorBrush x:Key="NegativeModiferColour" Color="{StaticResource alertColor}" Opacity="0.6"/>
                                    </Border.Resources>
                                    <StackPanel x:Name="ModifiersPanel" VerticalAlignment="Top" HorizontalAlignment="Center" Orientation="Horizontal" Height="Auto" Visibility="Collapsed" DataContext="{Binding CurrentPlayer.UIData.HitChanceDesc}" Margin="0,24,0,0">

                                        <!-- Positive Modifier -->
                                        <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=PositiveModifierBehavior}" Template="{StaticResource MinimalItemsControlTemplate}">
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="ls:VMBoost">
                                                    <Border Style="{StaticResource ModifierBorder}">
                                                        <Border.Background>
                                                            <SolidColorBrush Color="{StaticResource bonusColor}" Opacity="0.6"/>
                                                        </Border.Background>
                                                        <StackPanel Orientation="Horizontal" Margin="8,0">
                                                            <Image Source="{StaticResource DeltasPlus}" Stretch="None" Margin="-8,0" VerticalAlignment="Center"/>
                                                            <TextBlock x:Name="Desc" Style="{StaticResource ModifierTextBlock}" Text="{Binding Name}" VerticalAlignment="Center" Margin="4,4"/>
                                                        </StackPanel>
                                                    </Border>

                                                    <!-- If incoming text is empty, then we assume this is a Weapon Enchantment? Whaaaaa? -->
                                                    <DataTemplate.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding Name}" Value=""/>
                                                                <Condition Binding="{Binding BoostType}" Value="WeaponEnchantment"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter TargetName="Desc" Property="Text" Value="{Binding Source='had4b2edeg74a0g4bb0gac33g11c2ea95079e', Converter={StaticResource TranslatedStringConverter} }"/>
                                                        </MultiDataTrigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>

                                        <!-- Advantages -->
                                        <Border x:Name="AdvantagesListHolder" Style="{StaticResource ModifierBorder}" Visibility="{Binding Advantages.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                            <Border.Background>
                                                <SolidColorBrush Color="{StaticResource bonusColor}" Opacity="0.6"/>
                                            </Border.Background>
                                            <StackPanel Orientation="Horizontal" Margin="8,0">
                                                <Image Source="{StaticResource IconAdvantage}" Stretch="None" VerticalAlignment="Center"/>
                                                <!-- Temporarily hidden as a test <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='h986f906agb172g4956g9567g5cbd32150349', Converter={StaticResource TranslatedStringConverter}, StringFormat='\ {0}:'}" VerticalAlignment="Center" Margin="0,4"/> -->
                                                <ItemsControl ItemsSource="{Binding Advantages}" AlternationCount="{Binding Advantages.Count}" ItemTemplate="{StaticResource AdvantageItemTemplate}" ItemContainerStyle="{StaticResource AdvantageItemStyle}" VerticalAlignment="Center">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Horizontal"/>
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </StackPanel>
                                        </Border>

                                        <!-- Negative Modifier -->
                                        <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=NegativeModifierBehavior}" Template="{StaticResource MinimalItemsControlTemplate}">
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="ls:VMBoost">
                                                    <Border Style="{StaticResource ModifierBorder}" Background="{StaticResource NegativeModiferColour}">
                                                        <StackPanel Orientation="Horizontal" Margin="8,0">
                                                            <Image Source="{StaticResource DeltasMinus}" Stretch="None" Margin="-8,0" VerticalAlignment="Center"/>
                                                            <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Name}" VerticalAlignment="Center" Margin="4,4"/>
                                                        </StackPanel>
                                                    </Border>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>

                                        <!-- Disadvantages -->
                                        <Border x:Name="DisadvantagesListHolder" Style="{StaticResource ModifierBorder}" Visibility="{Binding Disadvantages.Count, Converter={StaticResource CountToVisibilityConverter}}"  Background="{StaticResource NegativeModiferColour}">
                                            <StackPanel Orientation="Horizontal" Margin="8,0">
                                                <Image Source="{StaticResource IconDisadvantage}" Stretch="None" VerticalAlignment="Center"/>
                                                <!-- Temporarily hidden as a test <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='h34944186g018cg474dg96d8gd56417c3e086', Converter={StaticResource TranslatedStringConverter}, StringFormat='\ {0}:'}" VerticalAlignment="Center"/> -->
                                                <ItemsControl ItemsSource="{Binding Disadvantages}" AlternationCount="{Binding Disadvantages.Count}" ItemTemplate="{StaticResource AdvantageItemTemplate}" ItemContainerStyle="{StaticResource AdvantageItemStyle}" VerticalAlignment="Center">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Horizontal"/>
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </StackPanel>
                                        </Border>
                                    </StackPanel>
                                </Border>

                                <!-- This is a hidden version of the panel so we can check it's width to collapse the visible status panels labels -->
                                <StackPanel x:Name="StatusHolderHidden" Orientation="Horizontal" HorizontalAlignment="Center" Visibility="Hidden" >
                                    <Control Template="{StaticResource ConcentrationTemplate}" DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Visibility="{Binding ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed}" HorizontalAlignment="Center"/>

                                    <ItemsControl ItemsSource="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects}" ItemTemplate="{StaticResource HiddenStatusListItemTemplate}" Background="Transparent" Template="{StaticResource MinimalItemsControlTemplate}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel IsItemsHost="True" HorizontalAlignment="Center" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Border>

                <!--Cast notification for the target-->
                <ItemsControl x:Name="CastInfoContainer" ItemsSource="{Binding CurrentPlayer.UIData.CastInfo}"  VerticalAlignment="Bottom" Margin="0,0,0,600">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMCastInfo">
                            <Grid x:Name="CastInfoRoot" MinWidth="660" HorizontalAlignment="Center">
                                <Grid.Tag>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                        <Binding Path="OwnerUserID"/>
                                    </MultiBinding>
                                </Grid.Tag>
                                <Grid.RenderTransform>
                                    <TranslateTransform />
                                </Grid.RenderTransform>

                                <ls:LSNineSliceImage x:Name="BGImage" Slices="180,40" Padding="120,28" ImageSource="{StaticResource CastBarBackground}">
                                    <Grid HorizontalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <TextBlock x:Name="CastInfoConcentration" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Center" TextAlignment="Left" Margin="0,-6,12,0" Foreground="{StaticResource LS_accent100TxtColor}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" FontSize="{StaticResource ScaledLargeFontSize}" FontWeight="DemiBold" >
                                            <Run Text="{Binding Source='h7e8c24aeg8d1ag401ag9feag4fbb7cbde48d', Converter={StaticResource TranslatedStringConverter}}"/><Run Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954', Converter={StaticResource TranslatedStringConverter}}"/>
                                        </TextBlock>
                                        <Rectangle x:Name="casterIcon" Grid.Column="1"  Fill="{Binding Caster.Icon}" Width="68" Height="68" Visibility="Collapsed"/>
                                        <Rectangle x:Name="actionIcon" Grid.Column="1" Fill="{Binding Icon}" Width="68" Height="68" />
                                        <TextBlock x:Name="CastText" Grid.Column="2" HorizontalAlignment="Center" Margin="18,-2,20,0" TextAlignment="Left" Foreground="{StaticResource LS_PrimaryColor}" VerticalAlignment="Center" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" FontWeight="DemiBold" FontSize="{StaticResource ScaledLargeFontSize}">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior Source="{Binding CastText}"/>
                                    </b:Interaction.Behaviors>
                                        </TextBlock>
                                    </Grid>
                                </ls:LSNineSliceImage>
                            </Grid>

                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IconName}" Value="unknown">
                                    <Setter TargetName="casterIcon" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="actionIcon" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding IconName}" Value="{x:Null}">
                                    <Setter TargetName="casterIcon" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="actionIcon" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding IsConcentrationSpell}" Value="True">
                                    <Setter TargetName="CastInfoConcentration" Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard  x:Name="AppearStoryboard" Storyboard="{StaticResource CastBarAppearAnim}" />
                                </EventTrigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                                    <StopStoryboard BeginStoryboardName="AppearStoryboard" />
                                    <StopStoryboard BeginStoryboardName="DisappearStoryboard" />
                                </EventTrigger>
                                <DataTrigger Value="True">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                            <Binding Path="CastProgressPercentage"/>
                                            <Binding Path="CastTime"/>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="DisappearStoryboard" Storyboard="{StaticResource CastBarDisappearAnim}" />
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=CastInfoRoot, Path=Tag}" Value="False"/>
                                        <Condition Binding="{Binding Caster.PlayerRelation}" Value="Player"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="BGImage" Property="ImageSource" Value="{StaticResource CoopCastBarBackground}"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Caster.PlayerRelation}" Value="Enemy">
                                    <Setter TargetName="BGImage" Property="ImageSource" Value="{StaticResource EnemyCastBarBackground}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>

            <DataTemplate.Triggers>

                <!-- IF: Hidden as a test, see DamagePreview
                
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.DamagePreviewWithResistances.Max}" Value="0">
                    <Setter TargetName="DamagePreview" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h3a320b9fg297dg4355g8622g24a2d9bdeed3',Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="DamagePreview" Property="Margin" Value="-30,0"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.DamagePreviewWithResistances.Max,Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource DoubleZeroValue}}" Value="True">
                    <Setter TargetName="DamageIcons" Property="Visibility" Value="Visible"/>
                </DataTrigger>-->

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat">
                    <Setter TargetName="TargetInfoRoot" Property="Margin" Value="0,228"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InFTB">
                    <Setter TargetName="TargetInfoRoot" Property="Margin" Value="0,308"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Type}" Value="Character">
                    <Setter TargetName="LevelText" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.CurrentTarget, Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="LevelText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="HPBarContainer" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="StatusHolder" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.ShowDescription}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Stats.Health.IsValid}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <!-- IF: Hidden as a test, see DamagePreview <Setter TargetName="HitChancePanel" Property="Visibility" Value="Visible"/>-->
                    <Setter TargetName="ModifiersPresenter" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource DoubleZeroValue}}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Advantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource DoubleZeroValue}}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Disadvantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource DoubleZeroValue}}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </ls:UIWidget.ContentTemplate>
</ls:UIWidget>