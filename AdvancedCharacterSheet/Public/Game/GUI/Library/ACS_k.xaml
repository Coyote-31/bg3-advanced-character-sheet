<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    mc:Ignorable="d">

    <!-- =================================================== -->
    <!-- === ACS keyboard library : All extracted parts === -->
    <!-- =================================================== -->

    <!-- ========================================================================================= -->
    <!-- === MOD_ACS: Control dynamic Interrupt / Reactions button - START                    === -->
    <!-- === MOD_ACS: Extracted template from DataTemplates.xaml / InterruptToggleBtnTemplate === -->
	<ControlTemplate x:Key="InterruptToggleBtnTemplateDynamic" TargetType="ToggleButton">
        <ControlTemplate.Resources>
            <Style TargetType="TextBlock" >
                <Setter Property="FontSize" Value="{DynamicResource ScaledSmallFontSize}" />
                <Setter Property="TextWrapping" Value="Wrap" />
                <Setter Property="MaxWidth" Value="600" />
                <Setter Property="IsHitTestVisible" Value="False" />
            </Style>
            <BitmapImage x:Key="CheckboxRound_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/checkBoxRound_h.png"/>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                    </Style>
                </Style.Resources>
            </Style>
            <SolidColorBrush x:Key="RowBG_d" Opacity="0.4" Color="{StaticResource accent75Color}"/>
            <SolidColorBrush x:Key="RowBG_h" Opacity="0.6" Color="{StaticResource accent75Color}"/>
            <SolidColorBrush x:Key="RowBG_guest_h" Opacity="0.4" Color="{StaticResource guestAccent100}"/>

            <DataTemplate DataType="ls:VMInterrupt">
                <!-- MOD_ACS: Add dynamic width -->
                <Grid x:Name="GridVMInterrupt" Width="{Binding ActualWidth, ElementName=Interrupts}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <ContentPresenter x:Name="Icon" Grid.Column="0" Grid.RowSpan="2" ContentTemplate="{StaticResource InterruptIcon}" Content="{Binding .}" IsHitTestVisible="False" Margin="0,0,10,0" VerticalAlignment="Center"/>
                    <!-- MOD_ACS: Add wrapping to reaction title -->
                    <!-- BG3: <TextBlock x:Name="Name" Grid.Column="1" Text="{Binding Name}" Foreground="{StaticResource LS_tint100}" HorizontalAlignment="Left"/> -->
                    <TextBlock x:Name="Name" Grid.Column="1" Text="{Binding Name}" Foreground="{StaticResource LS_tint100}" HorizontalAlignment="Left" MaxWidth="550" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis">
                        <TextBlock.Width>
                            <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                                <Binding Path="ActualWidth" ElementName="GridVMInterrupt"/>
                                <Binding Source="-220" />
                            </MultiBinding>
                        </TextBlock.Width>
                    </TextBlock>
                    <ItemsControl x:Name="CostList" Grid.Column="1" Grid.Row="1" AlternationCount="{Binding Costs.Count}" ItemsSource="{Binding Costs}" Visibility="{Binding Costs.Count, Converter={StaticResource CountToVisibilityConverter}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.IsEnabled="True" ToolTipService.Placement="Right" >
                                    <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding MaxValue, StringFormat='{}{0}'}" Visibility="{Binding MaxValue, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}" Margin="0,0,4,0"/>
                                    <Image Stretch="Uniform" Style="{StaticResource SectionImageStyle}" Height="36" Width="36"/>
                                    <TextBlock Style="{StaticResource SectionResourceNameStyle}" VerticalAlignment="Center" Text="{Binding Level, Converter={StaticResource DecimalToRomanConverter}}" Visibility="{Binding Level, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter='1'}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <!-- MOD_ACS: Add Dynamic Width -->
                    <TextBlock x:Name="AvailableMsg" Grid.Column="1" Grid.Row="1" Text="{Binding Source=h7bb323e1g2294g4f5eg905eg82ae9d71abf0,Converter={StaticResource TranslatedStringConverter}}" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_alertTxtColor}" Visibility="Collapsed" MaxWidth="384" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" HorizontalAlignment="Left">
                    <TextBlock.Width>
                        <MultiBinding Converter="{StaticResource AddMultipleConverter}">
                            <Binding Path="ActualWidth" ElementName="GridVMInterrupt"/>
                            <Binding Source="-430" />
                        </MultiBinding>
                    </TextBlock.Width>
                    </TextBlock>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Enabled}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Available}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_accent00TxtColor}"/>
                        <Setter TargetName="CostList" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="AvailableMsg" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CanUse}" Value="False">
                        <Setter TargetName="Name" Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ControlTemplate.Resources>

        <Grid x:Name="rootIntTemp" ToolTipService.IsEnabled="False"  ToolTipService.Placement="Right" ToolTipService.VerticalOffset="-74" MaxWidth="700" Margin="0,0,0,6" Background="Transparent">
            <Grid.ToolTip>
                <ls:LSTooltip x:Name="InterruptTooltip" Content="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
            </Grid.ToolTip>
            <Grid>
                
				<Border x:Name="InterruptBtnBg" BorderBrush="{StaticResource LS_PanelSelectedBorderInverted}" BorderThickness="2" CornerRadius="12" Background="{StaticResource RowBG_d}"/>
				
                <Grid HorizontalAlignment="Left" VerticalAlignment="Center" Margin="12,0,0,0">
                    <Image x:Name="BtnCheckBG" Source="{StaticResource CheckboxRound_h}" Stretch="None">
                        <Image.Effect>
                            <DropShadowEffect BlurRadius="10" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                        </Image.Effect>
                    </Image>
                    <Image x:Name="BtnCheck" Source="{StaticResource ReactionCheckImg}" Stretch="None" Visibility="Visible" Margin="-55"/>
                </Grid>
                <ContentPresenter Margin="60,8,10,8" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Content,Converter={StaticResource TypeConverter}, RelativeSource={RelativeSource Mode=Self}}" Value="ls.VMInterrupt">
                <Setter TargetName="rootIntTemp" Property="ToolTipService.ShowOnDisabled" Value="True"/>
                <Setter TargetName="rootIntTemp" Property="ToolTipService.IsEnabled" Value="True"/>
                <Setter TargetName="InterruptTooltip" Property="Content" Value="{Binding Path=Content, RelativeSource={RelativeSource Mode=Self}}" />
            </DataTrigger>

            <!--UNSELECTED DEFAULT-->
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_PanelBorder}"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </Trigger>
            
            <!--UNSELECTED HOVER-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="BtnCheck" Property="Source" Value="{StaticResource ReactionCheckImg}"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource RowBG_h}"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_PanelSelectedBorderInverted}"/>
            </MultiTrigger>
            
            <!--OTHER PLAYERS-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="BtnCheckBG" Property="Opacity" Value="0.25"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </Trigger>
            
            <!--OTHER PLAYERS SELECTED-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="BtnCheckBG" Property="Opacity" Value="0.25"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource RowBG_guest_h}"/>
            </MultiTrigger>
            
            <!--DISABLED-->
            <DataTrigger Binding="{Binding Available}" Value="False">
                <Setter TargetName="BtnCheck" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderBrush" Value="{StaticResource LS_tint20}"/>
                <Setter TargetName="InterruptBtnBg" Property="BorderThickness" Value="1"/>
                <Setter TargetName="InterruptBtnBg" Property="Background" Value="{StaticResource LS_BlackA20}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- === MOD_ACS: Control dynamic Interrupt / Reactions button - END === -->
    <!-- ==================================================================== -->
    
    <!-- ==================================================================================== -->
    <!-- === MOD_ACS: Tooltips DataTemplate - START                                      === -->
    <!-- === MOD_ACS: Extracted from Tooltips.xaml / DataType="{x:Type ls:VMResistance}" === -->
    <DataTemplate DataType="{x:Type ls:VMResistance}">
        <!-- MOD_ACS: images -->
        <DataTemplate.Resources>
            <ImageSource x:Key="NoResistanceIcon">pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel/resistance_none_bg.png</ImageSource>
        </DataTemplate.Resources>
        <!-- Enum value stored in tag as LocaEnum doesn't correctly support values past MAX. For those cases we have to alter the value (see triggers) -->
        <StackPanel x:Name="root" Tag="{Binding DamageTypeValue}">
            <StackPanel.Resources>
                <Style TargetType="ls:LSSpan" BasedOn="{StaticResource LSSpanStyle}">
                    <Style.Triggers>
                        <Trigger Property="TagType" Value="hl">
                            <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Resources>
            <!-- Default values and content is Vulnerable -->
            <Border Style="{StaticResource TooltipStripTopStyleWithContent}">
                <StackPanel>
                    <TextBlock x:Name="Title" Style="{StaticResource TooltipTitleNoCollapseStyle}" ls:TextBlockFormatter.SourceText="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h060ad079g2abdg43d8g9873gbb5fc58ba0e0'}"/>

                    <TextBlock Style="{StaticResource TooltipDescriptionStyle}" Visibility="{Binding Source, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                         <ls:TextBlockFormatter.SourceText>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hea17a85cg4aaag4679g9cbdge242e8f3bb9a"/>
                                <Binding Path="Source"/>
                            </MultiBinding>
                         </ls:TextBlockFormatter.SourceText>
                    </TextBlock>
                </StackPanel>
            </Border>
            <Rectangle Style="{StaticResource tooltipHeaderDividerLine}" />
            <DockPanel x:Name="BaseDescriptionContainer" Width="{StaticResource MaxTooltipContentWidth}">
                <!-- MOD_ACS: Change margin -->
                <Image x:Name="BaseIcon" Source="{StaticResource Vulnerable}" Stretch="None" VerticalAlignment="Center" Margin="0,0,20,0" DockPanel.Dock="Left"/>
                <TextBlock x:Name="BaseDescription" Style="{StaticResource TooltipBodyStyle}" Margin="0 20" ls:TextBlockFormatter.SourceText="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h8aa64a61g697ag44eag8025g72455bb15041'}" DockPanel.Dock="Right"/>
            </DockPanel>
            <DockPanel x:Name="AdditionalDescriptionContainer" Visibility="Collapsed" Width="{StaticResource MaxTooltipContentWidth}">
                <!-- MOD_ACS: Change margin -->
                <Image x:Name="AdditionalIcon" Source="{StaticResource ResistantNonMagical}" Stretch="None" VerticalAlignment="Center" Margin="0,0,20,0" DockPanel.Dock="Left"/>
                <TextBlock x:Name="AdditionalDescription" Style="{StaticResource TooltipBodyStyle}" Margin="0 20" ls:TextBlockFormatter.SourceText="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h05322b79g00ecg45c6gbbe0g691acc45fe63'}" DockPanel.Dock="Right"/>
            </DockPanel>

            <StackPanel x:Name="Duration" Orientation="Horizontal" Margin="{StaticResource DefaultMarginTopBottom}" Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}}">
                <Image Source="{StaticResource TTHourglassImage}" Stretch="None" VerticalAlignment="Center" />
                <TextBlock x:Name="DurationText" FontSize="{StaticResource MediumFontSize}" Margin="28,0,0,0"  VerticalAlignment="Center" Foreground="{StaticResource TooltipColor.Special}">
                    <TextBlock.Text>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="h2dc60835g9000g440fga70fg330291eda7eb"/>
                            <Binding Path="Duration"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </StackPanel>
        </StackPanel>
        <DataTemplate.Triggers>
            <!-- Adjusting Tag value for enum values past MAX (Only Spell is used currently) -->
            <DataTrigger Binding="{Binding DamageType}" Value="Spell">
                <Setter TargetName="root" Property="Tag" Value="{Binding DamageTypeValue, Converter={StaticResource AddConverter}, ConverterParameter=-1}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding NonMagical}" Value="Immune">
                <Setter TargetName="BaseIcon" Property="Source" Value="{StaticResource ImmuneNonMagicalShield}"/>
                <Setter TargetName="BaseDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h97808b5cgaad5g464dg968eg0c072a28050f'}"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h4c9804e9gee38g479agb4d4g58fb0b82ef4a'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Magical}" Value="Immune">
                <Setter TargetName="BaseIcon" Property="Source" Value="{StaticResource ImmuneMagicalShield}"/>
                <Setter TargetName="BaseDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h3aae6c8cg0762g42a1g8009g198913051bda'}"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h4c9804e9gee38g479agb4d4g58fb0b82ef4a'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Full}" Value="Immune">
                <Setter TargetName="BaseIcon" Property="Source" Value="{StaticResource ImmuneShield}"/>
                <Setter TargetName="BaseDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h1a4566fcgb2a0g403bg8290ga38efbb04b46'}"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h4c9804e9gee38g479agb4d4g58fb0b82ef4a'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding NonMagical}" Value="Resistant">
                <Setter TargetName="BaseDescriptionContainer" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="AdditionalDescriptionContainer" Property="Visibility" Value="Visible"/>
                <Setter TargetName="AdditionalIcon" Property="Margin" Value="0,15,20,0"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h1acad36eg1d2ag46c5g9b98g906b8a17bb70'}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Magical}" Value="Resistant">
                <Setter TargetName="BaseDescriptionContainer" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BaseIcon" Property="Source" Value="{StaticResource ResistantMagical}"/>
                <Setter TargetName="BaseIcon" Property="Margin" Value="0,15,20,0"/>
                <Setter TargetName="BaseDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h613f3ccbgb531g4175ga9cbge4a9ed938a12'}"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h1acad36eg1d2ag46c5g9b98g906b8a17bb70'}"/>
            </DataTrigger>
            
            <!-- MOD_ACS: Add no resistance or vulnerable tooltip -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Full}" Value="None"/>
                    <Condition Binding="{Binding NonMagical}" Value="None"/>
                    <Condition Binding="{Binding Magical}" Value="None"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="BaseDescriptionContainer" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BaseIcon" Property="Source" Value="{StaticResource NoResistanceIcon}"/>
                <Setter TargetName="BaseIcon" Property="Margin" Value="8,0,28,0"/>
                <Setter TargetName="BaseDescription" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h78e41bdfg7ae5g47d5g902cgf32ae25a53de', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Tag, ElementName=root, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h1acad36eg1d2ag46c5g9b98g906b8a17bb70'}"/>
            </MultiDataTrigger>
            
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- === MOD_ACS: Tooltips DataTemplate - END === -->
    <!-- ============================================ -->

    <!-- ========================================================================================== -->
    <!-- === MOD_ACS: Buttons templates // BG3: From IconButtonTemplate in Buttons.xaml - START === -->
    <ControlTemplate x:Key="ACS_IconButtonTemplate" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="img" Source="{DynamicResource ButtonNormal}" Stretch="Uniform" Width="{DynamicResource ImgWidth}" Height="{DynamicResource ImgHeight}"/>
            <Image x:Name="icon" Margin="{DynamicResource IconMargin}"  HorizontalAlignment="Center" VerticalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="Uniform" Width="{DynamicResource IconWidth}" Height="{DynamicResource IconHeight}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonHighlight}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonPressed}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
                <Setter Property="Margin" Value="{DynamicResource IconPressedMargin}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource ButtonDisabled}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconDisabled}" TargetName="icon"/>
                <Setter Property="Opacity" Value="{DynamicResource IconDisabledOpacity}" TargetName="icon"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- === MOD_ACS: Buttons templates // BG3: From IconButtonTemplate in Buttons.xaml - END === -->
    <!-- ======================================================================================== -->

    <!-- ============================================================================================================== -->
    <!-- === MOD_ACS: ACS_CampPortraitTemplate // BG3: From CharacterPortraitTemplate in DataTemplates.xaml - START === -->
    <!--MOD_ACS: CAMP PORTRAIT TEMPLATE-->
    <DataTemplate x:Key="ACS_CampPortraitTemplate">
        <DataTemplate.Resources>
            <!-- MOD_ACS: Add camp portrait image -->
            <BitmapImage x:Key="CampPortraitImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ACS/CompanionsPanel/campPortrait.png" />
            <ImageBrush x:Key="CampPortraitImageBrush" ImageSource="{StaticResource CampPortraitImage}" Stretch="UniformToFill" Viewbox="0,0,0.8,1" Margin="0,-4,0,-4" />

            <Style TargetType="Border" >
                <!-- MOD_ACS: Update portrait ImageBrush value // BG3: Value="{Binding Icon}" -->
                <Setter Property="Background" Value="{StaticResource CampPortraitImageBrush}"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Margin" Value="4"/>
            </Style>
        </DataTemplate.Resources>
        <Grid>
            <Border Name="Backfill" Background="{StaticResource LS_tint00}"/>
            <Border Name="PortraitImage" />

            <ls:LSEntityObject EntityRef="{Binding EntityHandle}" Background="Transparent">
                <ls:LSEntityObject.ToolTip>
                    <ls:LSTooltip Content="{Binding Path=DataContext.Name,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                </ls:LSEntityObject.ToolTip>
            </ls:LSEntityObject>
        </Grid>
    </DataTemplate>
    <!-- === MOD_ACS: CampPortraitTemplate // BG3: From CharacterPortraitTemplate in DataTemplates.xaml - END === -->
    <!-- ======================================================================================================== -->

</ResourceDictionary>